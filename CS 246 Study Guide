1. What are static members?
Ans. Static members are associated with the class itself, not with any specific instance of the class.

2. What does the compiler check for const methods? Can any other method call const obj?
Ans. The compiler checks that const methods don't actually modify any fields, at all. Also, only constant methods can call constant objects.

3. What should you do if you want to modify a field even if the field is constant?
Ans. declare the field mutable.

4.When would I need to use the singleton pattern?
Ans. I want to use the singleton pattern when I want to ensure that only one instance of the class gets created, no matter how many times I attempt to create an instance.

5. I have a static int numInstances in a class student? How and where do I declare this static variable?
Ans. Declare it as int Student::numInstances = 0;

Static instances should be defined external to this class at file level.

6. Can I have a this pointer in a static member function? What can it access?
ans. no, because it is not dependent to any specific instance. Due to this, it can access any static member it would like.

7.Where can atexit be found? What does it do?
Ans. the atexit function takes a fucntion returning void, returns void itself and runs it when the program terminates.

8.What are friend functions. Give an example.
Ans. Friend functions can see the private members in your class, but aren't a member of the class itself. Classes should strive to have as few as possible friend functions. 
Ex. friend std::ostream &operator<<(ostream& out, const Vector& v);

9. Describe the three events that happen when an object is created and destroyed?
When an object is created,
1. Space is allocated.
2. Constructor/initializaiton lists are run
3. Constructor body runs

when an object is destroyed,
1.Destructor body runs
2. Destructor are invoked for all fields in reverse order
3. Space is deallocated.

10. What is composition?
ans. Embedding an object within another class is called composition.
See example 

struct Vector{
    int x, y, z;
    Vector():x(x),y(y),z(z){};
}

struct Plane{
    Plane():v1(1,0,0), v2(2,2,2){};
}

11. Describe owns-a relationship
Ans. -B has no existence outside A
-If A is destroyed, then B is destroyed.
- If A is copied, then B is copied. (deep copy)

12. Describe aggregation/has-a relationship
- If A has a B, then B has an existence apart from its association with B
-If A is destroyed, then B lives on.
-If A is copied, then B is shallow copied so copies of A share the same B AKA A only has a pointer to B's objects

13. Give an example of owns-a relationship or aggregation.

class Pond{
    Duck *ducks[maxducks];
}

class Catalogue{
    Part *brakes[noOfBrakes];
    Part *p;
}

14. Can derived classes(inherits base class's fields and methods) access the private fields they inherit?
Ans. No, these fields are private in the base class, so derived classes cannot see the private fields they inherit.

15. Describe the four steps when a subclass object is constructed.
Ans. 1.Superclass is allocated.
2. Superclass part is allocated.
3. Fields are initialized
4. Constructor body runs

16.When giving access permission of private fields in superclass to subclasses, what's better than making private fields in superclass protected?
ans. create protected acccessor methods that only the subclass can access.

17. When accessing objects through pointers, how does compiler determine to run a method from the superclass or the subclass?

Ans. the compiler uses the type of the pointer or reference, and doesn't care about the actual type. An example would be that a comicbook is a comicbook only when a comicbook points to it.


18. Say if you had the following
Comicbook cb(..,...,...);
Book *pb = &cb;
ComicBook *pcb = &cb;

19.How do I make sure that when pb->isItHeavy() runs, ComicBook::isItHeavy runs??

Ans. Since the compiler uses the type of the pointer or reference to determine which isItHeavy() to run, we should declare the method virtual so that this chooses which class method to run based on the actual type of the object at runtime.

20. Define polymorphism
Ans. Accomodating mutiple types under one abstraction. For example, a function like void f(istream& n) can be passed as istream, that is an ifstream is an istream

21a. If you have a subclass which inherits a superclass with an int as a field and the subclass holds another int, then how would an array of subclass objects behave when passed to a function that takes an array of superclass?

Ans. The function that takes an array of the superclass, will convert the subclass to superclass and lose track of the subclass's indexing. !!POORLY WORDED ANSWER!!

21b. If an array of superclass took a subclass as a parameter (ex. oneArr[0] = Two(1,2)), then what would the accessing superclass give?

Ans. You would only be able to access the first field of the subclass, so 1 would be the only accessible element in the Two in the example above.

22. How would I be able to accomodate mixed pointer assignments of subclasses and superclasses?

Ans. non-virtual operators only allow for partial assingments whereas virtual operatos allows mixed assignments. make the superclasses abstract, and make the operator= protected in Abstract class to prevent assignment through base class pointers. 

23. Why do abstract classes need one pure virtual method and why the destructor? How do you override the abstract class destructor in the subclass.

every class has a destructor, user-defined or inbuilt which overrides the default destructor.

24. Define the observer patter in context of one class? in context of multiple classes? 

Ans. In one class, there is a subject/publisher idea where the subject is observable, it generates data and publisher does the observing.
In multiple class, there is a observer/subscriber idea where the observer observes data from the subscriber and responds to it.

25. Give an example of the observer pattern. Does subject need to know about the observer? Draw a diagram of this before the final exam.

A subject could be spreadsheet cells, the observers could be graphs(data in cells) where when cells change, the graph updates itself. No the subject doesn't need to know the details of the observer.

26. Give the method of sequence calls in the observer pattern.
 1. Observers are attached to the subject (Subject::attach(Observer *))
 2. Subject's state is updated.
 3. Subject notifies all observers(Subject::notifyObservers())
 4. Each observer queries the state of the subject and responds (Concrete subject::getState())

27. Why can we merge subject and concrete subject? Does the observer need Subject::getState() and give an example of merging subject and observer?

Subject only needs to define the basic attach and detach methods whereas the specific concrete subject would define the getState() method where the concrete subject is inherited from the subject. If the observer being notified is enough, then getState() doesn't need to be called. If the subject is the same as the observer, then we can merge these classes, such as cells in a grid.

28. Define decorator pattern and give an example of it.

Ans.Enhance an object at runtime by decorating it, either by adding features or functionality, most importantly at runtime runtime runtime runtime runtime.

29. Draw a diagram of the decorator pattern, and define a decorator. Is it a "is-a" or "has-a" relation?

Ans. A decorator inherits from Component and has a pointer to a Component,making it an "is-a" and a "has-a" relationship. Since all decorators inherit from Component, the component methods can be used polymorphically on all of them.

!* Insert question for the answer below.
Ans. Every time you add a decorator,ex. topping, it is decorating the previous object, where each decorator has a pointer to the previous decorator which eventually has pointer to the Concrete component ,ex. crust and pizza sauce

Calling the methods in the abstract Component class will also result in a chain of calls and a single delete component will also lead to a chain of destructors being called, freeing all of allocated memory.

30. What do factory method patterns have to do with singletons?

factory patterns integrate well with singletons. For example,  if you had two classes and you added a new subclass to one of those two classes, then that superclass's children can instantiate that new subclass whereas the other superclass's children cannot, making that new subclass a singleton. In any case, the addition of the singleton is transparent to the client. 

31. Draw an example of a factory method pattern.

32. Define the template method pattern. Give an example

Ans. Template method pattern allows subclasses to override the superclss behaviour but some aspects of the superclass must stay the same. An example is a red turtle changing the derived drawShell() method but not being able to change the superclass's drawTurtle() method.

33. What are breakpoints?

Ans. Breakpoints tell gdb to stop execution at certain points so you can see what's going on.

Note: break can be used in the context of 'break <function>' or 'break <file><line>'. 'step' runs one line of the program stepping into functions, if necessary whereas 'next' and continue, continues execution wherever you are.

34. Match the following

has-a public inheritance (triangle in UML) 
owns-a aggregation(empty diamond in UML)
is-a   composition(solid diamond in UML)

Ans.

has-a aggregation(empty diamond in UML)
owns-a composition(solid diamond in UML) 
is-a   public inheritance (triangle in UML) 

35.  What is "uses-for implementation" also called? Define it.

Ans. "Private inheritance" means that public and protected members of the base class become private in subclasses.

