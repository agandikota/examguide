1. What are static members?
Ans. Static members are members associated with the class itself, not with any specific instance of the class.

2. What does the compiler check for in const methods? Can any other method call const obj?
Ans. The compiler checks that const methods don't actually modify any fields, at all. Also, only constant methods can call constant objects.

3. What should you do if you want to modify a constant field?
Ans. declare the field mutable.

4.When would one need to use the singleton pattern?
Ans. The singleton ensures that only a single instance is created and a reference to it can be passed on as a parameter to other methods where it would be treated as a regular object.

6. Can I have a 'this' pointer in a static member function? What can it access?
Ans. No, because static functions are not dependent to any specific instance. Due to this, it can access any static member it would like.

7.Where can atexit be found? What does it do? Give an exmpale of atexit().
Ans. The atexit function,found in <cstdlib>, takes a function returning void, returns void itself and runs it when the program terminates.

Example of atexit:
if (!instance){
	instance = new Wallet;
	atexit(cleanup);
}

8.What are friend functions? Give an example.
Ans. Friend functions can see the private members in your class, but they aren't a member of the class itself. Classes should strive to have as few friend functions as possible. 

Ex. friend std::ostream &operator<<(std::ostream& out, const Vector& v);

9. Describe the three events that happen when an object is created and destroyed?
When an object is created,
1. Space is allocated.
2. Constructor/initializaiton lists are run
3. Constructor body runs

when an object is destroyed,
1.Destructor body runs
2. Destructor are invoked for all fields in reverse order
3. Space is deallocated.

10. What is composition? Give an example
Ans. Embedding an object within another class is called composition.
See example 

class Vector{
    int x, y, z;
public:
    Vector():x(x),y(y),z(z){};
}

class Plane{
	Vector v1,v2;
public:
    Plane():v1(1,0,0), v2(2,2,2){};
}

11. Describe an 'owns-a' relationship
Ans.- B has no existence outside A
-If A is destroyed, then B is destroyed.
- If A is copied, then B is copied. (deep copy)

12. Describe aggregation/has-a relationship
- If A has a B, then B has an existence apart from its association with B
-If A is destroyed, then B lives on.
-If A is copied, then B is shallow copied so copies of A share the same B ie. A only has a pointer to B's objects

13. Give an example of has-a relationship or aggregation.

class Pond{
    Duck *ducks[maxducks];
}

class Catalogue{
    Part *brakes[noOfBrakes];
    Part *p;
}

14. Can derived classes(inherits base class's fields and methods) access the private fields they inherit?
Ans. No, these fields are private in the base class, so derived classes cannot see the private fields they inherit.

15. Describe the four steps when a subclass object is constructed.
Ans. The four steps are:

1. Superclass is allocated.
2. Superclass part is allocated.
3. Fields are initialized
4. Constructor body runs

16.When giving access permission of private fields in superclass to subclasses, what's better than making private fields in superclass protected?
Ans. create protected acccessor methods that only the subclass can access.

17. When accessing objects through pointers, how does compiler determine whether to run a method from the superclass or the subclass?
Ans. The compiler uses the type of the pointer or reference, and doesn't care about the actual type. An example would be that a comicbook is a comicbook only when a comicbook points to it.


18. Say if you had the following
Comicbook cb(..,...,...);
Book *pb = &cb;
ComicBook *pcb = &cb;

19.How do I make sure that when pb->isItHeavy() runs, ComicBook::isItHeavy runs??

Ans. Since the compiler uses the type of the pointer or reference to determine which isItHeavy() to run, we should declare the method virtual so that this chooses which class method to run based on the actual type of the object at runtime.

20. Define polymorphism
Ans. Accomodating mutiple types under one abstraction. For example, a function like void f(istream& n) can be passed as istream, that is an ifstream is an istream

21a. If you have a subclass which inherits a superclass with an int as a field and the subclass holds another int, then how would an array of subclass objects behave when passed to a function that takes an array of superclass?

Ans. The function that takes an array of the superclass, will convert the subclass to superclass and lose track of the subclass's indexing. !!POORLY WORDED ANSWER!!

21b. If an array of superclass took a subclass as a parameter (ex. oneArr[0] = Two(1,2)), then what would the accessing superclass give?

Ans. You would only be able to access the first field of the subclass, so 1 would be the only accessible element in the Two in the example above.

22. How would I be able to accomodate mixed pointer assignments of subclasses and superclasses?

Ans. non-virtual operators only allow for partial assingments whereas virtual operatos allows mixed assignments. make the superclasses abstract, and make the operator= protected in Abstract class to prevent assignment through base class pointers. 

23. Why do abstract classes need one pure virtual method and why the destructor? How do you override the abstract class destructor in the subclass.

every class has a destructor, user-defined or inbuilt which overrides the default destructor.

24. Define the observer patter in context of one class? in context of multiple classes? 

Ans. In one class, there is a subject/publisher idea where the subject is observable, it generates data and publisher does the observing.
In multiple class, there is a observer/subscriber idea where the observer observes data from the subscriber and responds to it.

25. Give an example of the observer pattern. Does subject need to know about the observer? Draw a diagram of this before the final exam.

A subject could be spreadsheet cells, the observers could be graphs(data in cells) where when cells change, the graph updates itself. No the subject doesn't need to know the details of the observer.

26. Give the method of sequence calls in the observer pattern.
 1. Observers are attached to the subject (Subject::attach(Observer *))
 2. Subject's state is updated.
 3. Subject notifies all observers(Subject::notifyObservers())
 4. Each observer queries the state of the subject and responds (Concrete subject::getState())

27. Why can we merge subject and concrete subject? Does the observer need Subject::getState() and give an example of merging subject and observer?

Subject only needs to define the basic attach and detach methods whereas the specific concrete subject would define the getState() method where the concrete subject is inherited from the subject. If the observer being notified is enough, then getState() doesn't need to be called. If the subject is the same as the observer, then we can merge these classes, such as cells in a grid.

28. Define decorator pattern and give an example of it.

Ans.Enhance an object at runtime by decorating it, either by adding features or functionality, most importantly at runtime runtime runtime runtime runtime.

29. Draw a diagram of the decorator pattern, and define a decorator. Is it a "is-a" or "has-a" relation?

Ans. A decorator inherits from Component and has a pointer to a Component,making it an "is-a" and a "has-a" relationship. Since all decorators inherit from Component, the component methods can be used polymorphically on all of them.

!* Insert question for the answer below.
Ans. Every time you add a decorator,ex. topping, it is decorating the previous object, where each decorator has a pointer to the previous decorator which eventually has pointer to the Concrete component ,ex. crust and pizza sauce

Calling the methods in the abstract Component class will also result in a chain of calls and a single delete component will also lead to a chain of destructors being called, freeing all of allocated memory.

30. What do factory method patterns have to do with singletons?

factory patterns integrate well with singletons. For example,  if you had two classes and you added a new subclass to one of those two classes, then that superclass's children can instantiate that new subclass whereas the other superclass's children cannot, making that new subclass a singleton. In any case, the addition of the singleton is trAns.arent to the client. 

31. Draw an example of a factory method pattern.

32. Define the template method pattern. Give an example

Ans. Template method pattern allows subclasses to override the superclss behaviour but some aspects of the superclass must stay the same. An example is a red turtle changing the derived drawShell() method but not being able to change the superclass's drawTurtle() method.

33. What are breakpoints?

Ans. Breakpoints tell gdb to stop execution at certain points so you can see what's going on.

Note: break can be used in the context of 'break <function>' or 'break <file><line>'. 'step' runs one line of the program stepping into functions, if necessary whereas 'next' and continue, continues execution wherever you are.

34. Match the following

has-a public inheritance (triangle in UML) 
owns-a aggregation(empty diamond in UML)
is-a   composition(solid diamond in UML)

Ans.

has-a aggregation(empty diamond in UML)
owns-a composition(solid diamond in UML) 
is-a   public inheritance (triangle in UML) 

35.  What is "uses-for implementation" also called? Define it. Would this create an is-a relationship?

Ans. "Private inheritance" meAns.that public and protected members of the base class become private in subclasses. This wouldn't create an is-a relationship.

36. What should one generally prefer over private inheritance? When should one use private inheritance?

Ans. One should prefer fields over data classes. Use private inheritance to override virtual methods in the superclass and if you want access to protected members.

37. Define a template. Write an example of a template (the template for node is given in Ans.? How does compiler treat templates (when it does it compile it?)

Ans. Template is a class parameterized by type. In some sense, node is really a template for a class For example, the template for Node would look like

template <typename T> class Node{
	T data;
	Node <T> *next;
public:
	Node(T data, Node<T> *next) : data(data), next(next){}
	T getData() const {return data;}
	Node<T>* getNext() const {return next;}
}

The compiler specializes templates at source code level before compilation begins. 

38. Write the template declaration for a list where the type is Node<int> and return type is Node

Ans: Node<Node<int> > list;

39.What is purpose of Singleton design pattern?
- Ensures a class has only one instance and provide a global point of access to it.

40. Advantages of Singleton Design?
-One access point to private static instance
-Reduced namespace : avoids global variables
-Creates singleton object on demand.

41. What is atexit function?
-Takes a pointer to a funciton with signature void func(void);
-Returns 0 on success

42. When is atexit called?
-func is automatically called when the program normally exits
-In multiple functions, LIFO order

43. What does a->b(association) in UML diagrams mean?
- In UML diagrams, a->b meAns.that a has a pointer/reference to b.
-One doesn't contain each other.
-either has ptr/ref to b, method argument or local variable

44. Describe aggregation (has-a) and an example
-whole(a) and part(b) where a->b
-whole (a) can't create/destroy part(b)
-a either has (1)ptr/ref to b or (2)array of ptr to b
 Ex. class Car{
 	Tires *tires[4]; //has ptr to b
 }

45. Describe composition(owns-a) and an example
-whole(a) is reponsible for life cycle of part(b)
-a either has (1)array of parts(b), (2) part as member variable, (3) pointer to part with new and delete
Ex.class Car{
		Breaks breaks[4];
}

46. Denote public, private and protected,static, const, type var, type* var, type var[10] and type fn(type arg)?

public +
private -B
protected #
static underlined
const ALL_CAPS
type var var:type
type *var var:type*
type var[10] var:type[0...10]
type fn(type arg) fn(type arg):type

47. How does private inheritance affect subclasses?
A:-public,protected members become private in subclass
-implement child class without being accessible to others

48. What's a better alternative to private inheritance? When should I use it?
-prefer fields over inheritance.
You should use it when you want to;
- you want to override the virtual method
- access protected members

49. What's a template?
-Class parameterized by type.
-Compiler specializes templates at source code level before the compilation even begins.

template <typename T> class Node {
	T data;
	Node<T> *next;
  public:
	Node(T data, Node<T> *next) : data(data), next(next) {};
	T getData() const { return data; }
	Node<T> *getNext() const { return next; }
};
Node<int> intList = new Node<int>(1, new Node<int>(2,0));
Node<char> charList = new Node<char>(’a’, 0);

50. What does v.pop_back(),v.begin() and v.end() do?
- v.pop_back() removes and returns the last element
- v.begin() points to the first element
- v.end() points to one past the first element

51.Give an example of a loop using an iterator on a vector

for (vector<int>::iterator i = v.begin(); i != v.end(); i++){
	cout << *i << endl;
}

52. Give an example of erasing data from a vector

v.erase(v.begin()); //erases first element 
v.erase(v.end()-1); //erases the last element

53.Define basic use of map

-to create association lists
- 	map<string,int> m;
	m["abc"] = 1;
	m.erase("abc");
	if (m.count("def")) //returns 0 if not found, 1 if found

54. What if you try to retrieve a key that doesn't exist?
- It adds it and sets it to 0

55. Give an example of a for loop that iterates over a map. Identify kv pair

map<string, int> m;
for (map<string, int>::iterator i = m.begin(); i != m.end(); i++){
	cout << i->first << " " << i->second << endl;
}

Note that i is the key-value pair

Recall:What are virtual methods?
-methods chosen on the runtime type of the object on which method is invoked.

56. Describe "double dispatch"
-operation that gets executed based on the kind of request and two types of recievers(Visitors and elements).
-lets visitors request different operations on each class of element

57. What is the visitor pattern?
-Lets you define a new operation without changing the classes that it operates on and stops "polluting classes"
-adding a new operation requires recompiling all these classes.
-When an element accepts the visitor, it sends a request to the visitor that encodes the element’s class.
-It also includes element as argument after which the visitor will execute the operation for that argument.
-two class hierarchies: nodes being operated on(Node hierarchy) and one for visitors that define operations on elements.(NodeVisitor hierarchy)
-You add a new class to the visitor class hierarchy.
-a visitor must visit each element in the object structure.

58. If you had the book hierarchy (recall from examples) and you need to track how many of each book you have, what pattern would you use and how would you implement it (just briefly).

Create a map<string,int> catalogue where it has its own class with the map as a private field and each type of book would have its own visitor function ex. void visit (CSBook &csb) {catalogue[csb.getLanguage()]++;}.

59. Why would the above method fail in the book hierarchy where the catalogue stores a map with each type of book being stored. How would you solve it?

Ans. It wouldn't compile because it has circular include dependencies. We can declare the class without defining it, by replacing the include with class declaration such as instead of #include "blist.h", we would write class BList;

60. Which one of the following code examples use compilation dependencies?

Example I:

class A;
class D{
	A *myAp;
};

Example II:
class A;
class E{
	A f(A x);
};


Example III:
#include "a.h"
class C{
	A myA;
};

Example IV:
#include "a.h"
class C : public A{
}

Answer: Examples III and IV use compilation dependency whereas examples I and II do not use compilation dependencies. Example IV, since class C inherits from public class A, C needs to know how big A is, similarly for Example III. 

Whereas in example I and II, we know the size of a pointer and the funciton is just a prototype declaration.

61. If our class has a pointer to the other class, we don't need to know about the other class since we have a pointer to the object. If your class is using a method from the other class, do you still need to include the other class?

Ans. Yes, this is a true compilation dependency. Note: one should always try to #include in the .cc file instead of the .h file when possible.

62. Describe the "pimpl" implementation. Describe the bridge pattern.

Ans. The pimpl idiom ("pointer to implementation") involves creating a struct to hold the private data. this way if we were to change some of the private members in the original class, there would be a minimum level of compilation. The bridge pattern uses pimpl idiom with subclassing to accomadate alternate implementations. 

63. Define coupling and give an example of low and high coupling. 

Ans. Coupling is a degree to which distinct program modules depend on or affect each other. Interaction via function calls, shared data implies low coupling. Modules which have access to each other implementation's imply high coupling (friends).

64. Define cohesion and give an example of low and high cohesion. 

Ans. Cohesion is the degree to which elements of a module belong to each other, ie. how much they cooperate to achieve a common goal. A poor cohesion example would be the algorithm library where it has a common theme but otherwise it's a bunch of unrelated algorithms. High cohesion usually implies readability and maintainablity.

65. Give an example of a C-style cast. 

Ans. Node n;
	 int * i = (int *) &n; // C-style cast

This forces C++ to treat the Node* as an int*.

66. Define the four types of casting available and when you should use each of them.

1. static_cast
- when you know you have an object of a specific type
- no runtime checking performed whatsoever.
ex. double d = 0;
	int i = static_cast<int> (d);
ex. Book *b = new CSBook (...);
	CSBook *csb = static_cast<CSBook*>(b);

One takes responsibility that b actually points to a CSBook.

2. reinterpret_cast
- allows you to cast any arbitrary types.
- disregards type safety (avoid or use at own risk)
Ex. Vector *v;
	Student *s = reinterpret_cast<Student*> (v);

3. const_cast
- allows you to convert between const and non-const 
ex. void f(int *p);
	void g(const int* p){
		f(const_cast<int*> (p));
	}

4. dynamic_cast
-checks if it is safe to convert a superclass pointer to a subclass pointer(ex. book* to csbook*)
ie. does a tentative cast and see if it succeds
ex. Book* pb;
	static_cast<CSBook*>(pb) -> getLanguage();

	changed to

ex. Book *pb;
	CSBook *csb = dynamic_cast<CSBook*> (pb);

67. What if a dynamic cast fails (ex. pb doesn't point to a CSBook)?

Ans. If the cast works, then subclass object will point to the superclass object. If not, then it is simply set to null. In previous example, csb would be set to null or point to the object.

Note: You can check (if (csb)) to see if it points to the object.

68. Why is using dynamic casting to determine an object's runtime type considered bad? What's a better option

Ans. It is highly coupled to the hierarchy and is considered bad code. Use virtual functions instead or write a visitor if possible.


69. Give an example of dynamic casting with references?  Does dyanmic casting work when you have class hierarchies with more than one virtual function?

Ans. CSBook csb(...);
Book& b = csb;
CSBook& csb2 = dynamic_cast<CSBook&> (b);

In this case, if the b points to a CSBook, then csb2 is the same reference to the same CSBook

70. Give three examples of when an exception is raised.

When a vector::at (checked version of operator[]) goes out of bounds, when new fails or when dynamic ref cast fails.

Note: the vector's code can detect the error but doesn't know what to do with it and the client can respond but can't detect the error.
























